/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import code.Patient;
import code.PatientDirectory;
import code.PersonDirectory;
import code.VitalSign;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rajvi
 */
public class vitalSignsRecord extends javax.swing.JPanel {

    /**
     * Creates new form vitalSignsRecord
     */
    PersonDirectory personDirectory;
    PatientDirectory patientDirectory;
    private ArrayList<Patient> patientList;
    JSplitPane sp;
    public vitalSignsRecord(JSplitPane sp,PersonDirectory personDirectory,PatientDirectory patientDirectory) {
        initComponents();
        this.personDirectory=personDirectory;
        this.patientDirectory=patientDirectory;
        this.sp=sp;
        
        if(patientDirectory != null){
            patientList = patientDirectory.getPatientHistory();
            populatePatientTable(patientList);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        addVitalButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        displayResultsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewVitalsTable = new javax.swing.JTable();
        viewVitalsButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "Gender", "Contact", "Role", "PatientID", "Height", "Weight", "Blood Group", "UserName", "Password"
            }
        ));
        jScrollPane2.setViewportView(patientTable);

        addVitalButton.setText("Add Vital Signs");
        addVitalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh ");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        displayResultsButton.setText("Display Results");
        displayResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayResultsButtonActionPerformed(evt);
            }
        });

        viewVitalsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "TimeStamp", "Status"
            }
        ));
        jScrollPane1.setViewportView(viewVitalsTable);

        viewVitalsButton.setText("View Vitals");
        viewVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewVitalsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addVitalButton)
                                .addGap(18, 18, 18)
                                .addComponent(refreshButton)
                                .addGap(18, 18, 18)
                                .addComponent(displayResultsButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(viewVitalsButton)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addVitalButton)
                    .addComponent(refreshButton)
                    .addComponent(displayResultsButton))
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewVitalsButton)
                .addContainerGap(311, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addVitalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Patient patient = (Patient)patientTable.getValueAt(selectedRow, 0);
        if(patient!=null)
        {createVitalSigns newPanel = new createVitalSigns(sp,personDirectory,patientDirectory,patient);
            sp.setRightComponent(newPanel);}
         else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addVitalButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
         populatePatientTable(patientDirectory.getPatientHistory());
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void displayResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayResultsButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
         Patient patient = (Patient)patientTable.getValueAt(selectedRow, 0);
        if(patient!=null)
        {
            //populateVitalSignTable(person);
            populateVitalsTable(patient);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create "
                    + "Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_displayResultsButtonActionPerformed

    private void viewVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewVitalsButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = viewVitalsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSign vitalSign = (VitalSign) viewVitalsTable.getValueAt(selectedRow, 0);
        
        viewVitals createPanel = new viewVitals(sp,personDirectory,patientDirectory,vitalSign,Boolean.FALSE);
        sp.setRightComponent(createPanel);
        
    }//GEN-LAST:event_viewVitalsButtonActionPerformed
private void populatePatientTable(ArrayList<Patient> patientList) {
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        if(patientList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Patient patient : patientList) {
            Object[] row = new Object[13];
            row[0] = patient;
            row[1] = patient.getPersonFirstName();
            row[2]= patient.getPersonLastName();
            row[3]= patient.getPersonAge();
            row[4]= patient.getPersonGender();
            row[5]= patient.getPersonContactNumber();
            row[6]= patient.getPersonRole();
            row[7]= patient.getPatientID();
            row[8]= patient.getPatientHeight();
            row[9]= patient.getPatientWeight();
            row[10]= patient.getPatientBloodGroup();
            row[11]= patient.getPatientUsername();
            row[12]= patient.getPatientPassword();
            
            model.addRow(row);
        }
    }
private void populateVitalsTable(Patient patient) {
        
        DefaultTableModel model = (DefaultTableModel) viewVitalsTable.getModel();
        model.setRowCount(0);
        if (patient != null) {
            //int patientAge = patient.getAge();
            int patientAge = patient.getPersonAge();
            //ArrayList<VitalSign> vitalSignList = person.getPatient().getVitalSignHistory().getHistory();
            ArrayList<VitalSign> vitalSignList = patient.getVitalSignHistoryList().getHistory();
            
            if (vitalSignList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found. Please"
                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            for (VitalSign vitalSign : vitalSignList) {
                Object[] row = new Object[2];
                row[0] = vitalSign;
                row[1] = VitalSignStatus(patientAge, vitalSign);
                model.addRow(row);
            }
        }
    }

private String VitalSignStatus(int patientAge, VitalSign vitalSign) {
        String vitalSignStatus = "Normal";
        
        int respirationRate = vitalSign.getRespiratoryRate();
        int heartRate = vitalSign.getHeartRate();
        int bloodPressure = vitalSign.getBloodPressure();
        float weight = vitalSign.getWeight();
        
        /*Toddler*/
        if (patientAge >= 1 && patientAge <= 3) {
            if ((respirationRate < 20 || respirationRate > 30) /*Respiration Rate*/
                    || (heartRate < 80 || heartRate > 130) /*Heart Rate*/
                    || (bloodPressure < 80 || bloodPressure > 110) /*Blood Pressure*/
                    || (weight < 22 || weight > 31)) /*Weight*/ {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Preschooler*/
        if (patientAge >= 4 && patientAge <= 5) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 80 || heartRate > 120)
                    || (bloodPressure < 80 || bloodPressure > 110)
                    || (weight < 31 || weight > 40)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*School Age*/
        if (patientAge >= 6 && patientAge <= 12) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 70 || heartRate > 110)
                    || (bloodPressure < 80 || bloodPressure > 120)
                    || (weight < 41 || weight > 92)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Adolescent*/
        if (patientAge >= 13) {
            if ((respirationRate < 12 || respirationRate > 20)
                    || (heartRate < 55 || heartRate > 105)
                    || (bloodPressure < 110 || bloodPressure > 120)
                    || (weight < 110)) {
                vitalSignStatus = "Abnormal";
            }
        }
        return vitalSignStatus;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalButton;
    private javax.swing.JButton displayResultsButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton viewVitalsButton;
    private javax.swing.JTable viewVitalsTable;
    // End of variables declaration//GEN-END:variables
}

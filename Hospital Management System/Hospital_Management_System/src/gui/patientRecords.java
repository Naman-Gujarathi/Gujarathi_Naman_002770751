/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import AdminGUI.adminPortal;
import code.PatientDirectory;
import code.PersonDirectory;
import java.util.ArrayList;
import javax.swing.JSplitPane;
import code.Person;
import code.Patient;


/**
 *
 * @author Rajvi
 */
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class patientRecords extends javax.swing.JPanel {
     PersonDirectory personDirectory;
     PatientDirectory patientDirectory;
     Patient patient;
    
    JSplitPane sp;
    private String  personFirstName;
    private String personLastName;
    private int personAge;
    private String personGender;
    private String personContactNumber;
    private String personRole;
    private String patientID;
    private String patientHeight;
    private String patientWeight;
    private String patientBloodGroup;
    private String patientUsername;
    private String patientPassword;

    /**
     * Creates new form patientRecords
     */
    public patientRecords(JSplitPane sp, PersonDirectory personDirectory, PatientDirectory patientDirectory) {
        initComponents();
        this.sp=sp;
        this.personDirectory= personDirectory;
        this.patientDirectory= patientDirectory;
        
        
        if(personDirectory!=null){
        ArrayList<Person> personList = personDirectory.getPersonHistory();
        populatePersonsTable(personList);
        }
        if(patientDirectory != null){
        
                 ArrayList<Patient> patientList = patientDirectory.getPatientHistory();
                 populatePatientTable(patientList);
        }
       
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        deletePatientButton = new javax.swing.JButton();
        updatePatientButton = new javax.swing.JButton();
        viewPatientButton = new javax.swing.JButton();
        createPatientButton = new javax.swing.JButton();
        patientBackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        patientIDText = new javax.swing.JTextField();
        patientHeightText = new javax.swing.JTextField();
        patientWeightText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        patientBloodGroupText = new javax.swing.JTextField();
        patientUsernameText = new javax.swing.JTextField();
        patientPasswordText = new javax.swing.JTextField();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("PATIENT RECORDS");

        deletePatientButton.setText("Delete");
        deletePatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientButtonActionPerformed(evt);
            }
        });

        updatePatientButton.setText("Update");
        updatePatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientButtonActionPerformed(evt);
            }
        });

        viewPatientButton.setText("View");
        viewPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientButtonActionPerformed(evt);
            }
        });

        createPatientButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        createPatientButton.setText("CREATE PATIENT");
        createPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPatientButtonActionPerformed(evt);
            }
        });

        patientBackButton.setText("Back");
        patientBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientBackButtonActionPerformed(evt);
            }
        });

        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "Gender", "Contact", "Role"
            }
        ));
        jScrollPane1.setViewportView(personTable);

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "Gender", "Contact", "Role", "PatientID", "Height", "Weight", "Blood Group", "UserName", "Password"
            }
        ));
        jScrollPane2.setViewportView(patientTable);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Patient ID :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Height :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Weight :");

        patientIDText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientIDTextActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Blood Group:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("UserName:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Passsword:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(307, 307, 307))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(patientIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientHeightText, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientWeightText, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(161, 161, 161)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientUsernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientBloodGroupText, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patientBackButton)
                                .addGap(688, 688, 688)))
                        .addContainerGap(37, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(createPatientButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(viewPatientButton)
                        .addGap(29, 29, 29)
                        .addComponent(updatePatientButton)
                        .addGap(18, 18, 18)
                        .addComponent(deletePatientButton)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(createPatientButton)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientBloodGroupText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientWeightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(patientHeightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(patientUsernameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewPatientButton)
                    .addComponent(updatePatientButton)
                    .addComponent(deletePatientButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(patientBackButton)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updatePatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patientTable.getSelectedRow();
        
        if (selectedRowIndex<0) {
            JOptionPane.showMessageDialog(this,"Please Select A row to be Updated");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        Patient patient = (Patient) model.getValueAt(selectedRowIndex, 0);
        
        model.setValueAt(patientIDText.getText(), selectedRowIndex,7);
        model.setValueAt(patientHeightText.getText(), selectedRowIndex,8);
        model.setValueAt(patientWeightText.getText(), selectedRowIndex,9);
        model.setValueAt(patientBloodGroupText.getText(), selectedRowIndex,10);
        model.setValueAt(patientUsernameText.getText(), selectedRowIndex,11);
        model.setValueAt(patientPasswordText.getText(), selectedRowIndex,12);
        
        String patID = model.getValueAt(selectedRowIndex,7).toString();
        String patHeight = model.getValueAt(selectedRowIndex,8).toString();
        String patWeight = model.getValueAt(selectedRowIndex,9).toString();
        String patBloodGroup = model.getValueAt(selectedRowIndex,10).toString();
        String patUsername = model.getValueAt(selectedRowIndex,11).toString();
        String patPassword = model.getValueAt(selectedRowIndex,12).toString();
        
        updatePatientID(patient,patID);
        updatePatientHeight(patient,patHeight);
        updatePatientWeight(patient,patWeight);
        updatePatientBloodGroup(patient,patBloodGroup);
        updatePatientUsername(patient,patUsername);
        updatePatientPassword(patient,patPassword);
        
        
        if(patientDirectory != null){
        
                 ArrayList<Patient> patientList = patientDirectory.getPatientHistory();
                 populatePatientTable(patientList);
        }
    }//GEN-LAST:event_updatePatientButtonActionPerformed

    private void createPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPatientButtonActionPerformed
        // TODO add your handling code here:
         int selectedRow= personTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person=(Person) personTable.getValueAt(selectedRow, 0);
        
       personFirstName=person.getPersonFirstName();
       personLastName=person.getPersonLastName();
       personAge=person.getPersonAge();
       personGender=person.getPersonGender();
       personContactNumber=person.getPersonContactNumber();
       personRole=person.getPersonRole();
       patientID=patientIDText.getText();
       patientHeight=patientHeightText.getText();
       patientWeight=patientWeightText.getText();
       patientBloodGroup=patientBloodGroupText.getText();
       patientUsername=patientUsernameText.getText();
       patientPassword=patientPasswordText.getText();
       
       Patient patient = new Patient(personFirstName,personLastName,personAge,personGender,personContactNumber, personRole, patientID,patientHeight,patientWeight,patientBloodGroup,patientUsername,patientPassword);
            if(patientDirectory != null){
                patientDirectory.addPatientToList(patient);
            }
            else{
                patientDirectory = new PatientDirectory();
                patientDirectory.addPatientToList(patient);
            }
            
            ArrayList<Patient>patientList = patientDirectory.getPatientHistory();
            
            DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
            populatePatientTable(patientList);
       
       
         
    }//GEN-LAST:event_createPatientButtonActionPerformed

    
    private void patientBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientBackButtonActionPerformed
        // TODO add your handling code here:
        adminPortal createPanel = new adminPortal();
        createPanel.setVisible(true);
    }//GEN-LAST:event_patientBackButtonActionPerformed

    private void patientIDTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientIDTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientIDTextActionPerformed

    private void viewPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= patientTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Patient patient =(Patient) patientTable.getValueAt(selectedRow, 0);
        
        patientIDText.setText(patient.getPatientID());
        patientHeightText.setText(patient.getPatientHeight());
        patientWeightText.setText(patient.getPatientWeight());
        patientBloodGroupText.setText(patient.getPatientBloodGroup());
        patientUsernameText.setText(patient.getPatientUsername());
        patientPasswordText.setText(patient.getPatientPassword());
        
        if(patientDirectory != null){
        
                 ArrayList<Patient> patientList = patientDirectory.getPatientHistory();
                 populatePatientTable(patientList);
        }
       /* if(patient!=null)
        {
          viewAndEditPatient createPanel = new viewAndEditPatient(sp,patient);
          sp.setRightComponent(createPanel);}
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, "
                    + "Please create Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }*/
    }//GEN-LAST:event_viewPatientButtonActionPerformed

    private void deletePatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= patientTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", 
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Patient patient=(Patient) patientTable.getValueAt(selectedRow, 0);
        /*Ask confirmation*/
        int flag= JOptionPane.showConfirmDialog(this, "Are you sure want to remove?",
                "Warning", JOptionPane.YES_NO_OPTION);
        if(flag==0)
        {
            patientDirectory.deletePatient(patient);
            
            ArrayList<Patient> patientList = patientDirectory.getPatientHistory();
                 populatePatientTable(patientList);
            
        }
    }//GEN-LAST:event_deletePatientButtonActionPerformed
    private void populatePersonsTable(ArrayList<Person> personList) {
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        model.setRowCount(0);
        if(personList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Person person : personList) {
            Object[] row = new Object[6];
            row[0] = person;
            row[1]= person.getPersonLastName();
            row[2]= person.getPersonAge();
            row[3]= person.getPersonGender();
            row[4]= person.getPersonContactNumber();
            row[5]= person.getPersonRole();
            model.addRow(row);
        }
    }
    
    private void populatePatientTable(ArrayList<Patient> patientList) {
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        if(patientList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Patient patient : patientList) {
            Object[] row = new Object[13];
            row[0] = patient;
            row[1] = patient.getPersonFirstName();
            row[2]= patient.getPersonLastName();
            row[3]= patient.getPersonAge();
            row[4]= patient.getPersonGender();
            row[5]= patient.getPersonContactNumber();
            row[6]= patient.getPersonRole();
            row[7]= patient.getPatientID();
            row[8]= patient.getPatientHeight();
            row[9]= patient.getPatientWeight();
            row[10]= patient.getPatientBloodGroup();
            row[11]= patient.getPatientUsername();
            row[12]= patient.getPatientPassword();
            
            model.addRow(row);
        }
    }

    public void updatePatientID(Patient patient, String patID ){
        patient.setPatientID(patientID);
    }
    public void updatePatientHeight(Patient patient, String patHeight ){
        patient.setPatientHeight(patientHeight);
    }
    public void updatePatientWeight(Patient patient, String patWeight ){
        patient.setPatientWeight(patientWeight);
    }
    public void updatePatientBloodGroup(Patient patient, String patBloodGroup ){
        patient.setPatientBloodGroup(patientBloodGroup);
    }
    public void updatePatientUsername(Patient patient, String patUsername ){
        patient.setPatientUsername(patientUsername);
        
    }
    public void updatePatientPassword(Patient patient, String patPassword ){
        patient.setPatientPassword(patientPassword);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createPatientButton;
    private javax.swing.JButton deletePatientButton;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton patientBackButton;
    private javax.swing.JTextField patientBloodGroupText;
    private javax.swing.JTextField patientHeightText;
    private javax.swing.JTextField patientIDText;
    private javax.swing.JTextField patientPasswordText;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField patientUsernameText;
    private javax.swing.JTextField patientWeightText;
    private javax.swing.JTable personTable;
    private javax.swing.JButton updatePatientButton;
    private javax.swing.JButton viewPatientButton;
    // End of variables declaration//GEN-END:variables
}
